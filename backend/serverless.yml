org: chunglx
app: notes-app-serverless
service: notes-app-serverless


plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    NOTES_TABLE: notes-${self:provider.stage}
    NOTES_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: attachment-s3-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetNotes:
    handler: src/lambda/http/getNotes.handler
    events:
      - http:
          method: get
          path: notes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt NotesTable.Arn


  CreateNote:
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          method: post
          path: notes
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt NotesTable.Arn


  UpdateNote:
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          method: patch
          path: notes/{noteId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-note-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt NotesTable.Arn

  DeleteNote:
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{noteId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt NotesTable.Arn

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: notes/{noteId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: !GetAtt AttachmentsBucket.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt NotesTable.Arn

resources:
  Resources: 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: noteId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId 
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.NOTES_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:  !Ref AttachmentsBucket
        PolicyDocument:
          Id: AttachmentsBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
      